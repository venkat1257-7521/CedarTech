import { Requireable } from 'prop-types';
import { Ref } from 'react';
import { DisplayHandlerProps, DisplayInterface } from './___subComponents/DisplayHandler';
import { InfiniteLoaderProps } from './___subComponents/InfiniteLoader';
import { renderFunc } from './___subComponents/uiFunctions';
import { GroupOptionsInterface } from './___utils/groupList';
import { SearchOptionsInterface } from './___utils/searchList';
import { SortOptionsInterface } from './___utils/sortList';
export declare type listItem = {
    id?: string | number;
} | unknown;
export interface GroupInterface extends GroupOptionsInterface {
    of: number;
    separator: JSX.Element | ((g: any, idx: number, label: string) => JSX.Element | null) | null;
    separatorAtTheBottom: boolean;
    sortBy: SortOptionsInterface['by'];
    sortDescending: boolean;
    sortCaseInsensitive: boolean;
}
export interface ScrollToTopInterface {
    button: JSX.Element | (() => JSX.Element);
    offset: number;
    padding: number;
    position: string;
}
export interface SortInterface extends SortOptionsInterface {
    groupBy: GroupInterface['sortBy'];
    groupDescending: GroupInterface['sortDescending'];
    groupCaseInsensitive: GroupInterface['sortCaseInsensitive'];
}
export interface Props {
    __forwarededRef: Ref<HTMLElement>;
    list: listItem[];
    renderItem: JSX.Element | renderFunc;
    renderWhenEmpty: null | (() => JSX.Element);
    renderOnScroll: boolean;
    limit: number | string;
    reversed: boolean;
    wrapperHtmlTag: string;
    sort: boolean | SortInterface;
    sortBy: SortInterface['by'];
    sortCaseInsensitive: SortInterface['caseInsensitive'];
    sortDesc: SortInterface['descending'];
    sortDescending: SortInterface['descending'];
    sortGroupBy: GroupInterface['sortBy'];
    sortGroupDesc: GroupInterface['sortDescending'];
    sortGroupDescending: GroupInterface['sortDescending'];
    sortGroupCaseInsensitive: GroupInterface['sortCaseInsensitive'];
    group: GroupInterface;
    showGroupSeparatorAtTheBottom: GroupInterface['separatorAtTheBottom'];
    groupSeparatorAtTheBottom: GroupInterface['separatorAtTheBottom'];
    groupReversed: GroupInterface['reversed'];
    groupSeparator: GroupInterface['separator'];
    groupBy: GroupInterface['by'];
    groupOf: GroupInterface['limit'];
    groupSorted: boolean;
    groupSortedDescending: GroupInterface['sortDescending'];
    groupSortedCaseInsensitive: GroupInterface['sortCaseInsensitive'];
    display: DisplayInterface;
    displayRow: DisplayHandlerProps['displayRow'];
    rowGap: DisplayHandlerProps['rowGap'];
    displayGrid: DisplayHandlerProps['displayGrid'];
    gridGap: DisplayHandlerProps['gridGap'];
    minColumnWidth: DisplayHandlerProps['minColumnWidth'];
    filterBy: string | ((item: listItem, idx: number) => boolean);
    search: SearchOptionsInterface;
    searchTerm: SearchOptionsInterface['term'];
    searchBy: SearchOptionsInterface['by'];
    searchOnEveryWord: SearchOptionsInterface['everyWord'];
    searchCaseInsensitive: SearchOptionsInterface['caseInsensitive'];
    searchableMinCharactersCount: SearchOptionsInterface['minCharactersCount'];
    pagination: InfiniteLoaderProps;
    hasMoreItems: InfiniteLoaderProps['hasMore'];
    loadMoreItems: null | InfiniteLoaderProps['loadMore'];
    paginationLoadingIndicator: InfiniteLoaderProps['loadingIndicator'];
    paginationLoadingIndicatorPosition: InfiniteLoaderProps['loadingIndicatorPosition'];
    scrollToTop: boolean | ScrollToTopInterface;
    scrollToTopButton: JSX.Element | (() => JSX.Element);
    scrollToTopOffset: number;
    scrollToTopPadding: number;
    scrollToTopPosition: string;
    [key: string]: any;
}
export declare const defaultProps: {
    __forwarededRef: {
        current: null;
    };
    limit: number;
    renderWhenEmpty: null;
    reversed: boolean;
    renderOnScroll: boolean;
    wrapperHtmlTag: string;
    display: {
        grid: boolean;
        gridGap: string;
        gridMinColumnWidth: string;
        row: boolean;
        rowGap: string;
    };
    displayGrid: boolean;
    displayRow: boolean;
    gridGap: string;
    rowGap: string;
    minColumnWidth: string;
    filterBy: string;
    group: {
        by: string;
        limit: number;
        of: number;
        reversed: boolean;
        separator: null;
        separatorAtTheBottom: boolean;
        sortedBy: string;
        sortBy: string;
        sorted: boolean;
        sortedCaseInsensitive: boolean;
        sortCaseInsensitive: boolean;
        sortedDescending: boolean;
        sortDescending: boolean;
    };
    groupBy: string;
    groupOf: number;
    groupReversed: boolean;
    groupSeparator: null;
    groupSeparatorAtTheBottom: boolean;
    groupSorted: boolean;
    groupSortedBy: string;
    groupSortedDescending: boolean;
    groupSortedCaseInsensitive: boolean;
    showGroupSeparatorAtTheBottom: boolean;
    pagination: {
        hasMore: boolean;
        loadMore: null;
        loadingIndicator: null;
        loadingIndicatorPosition: string;
    };
    hasMoreItems: boolean;
    loadMoreItems: null;
    paginationLoadingIndicator: null;
    paginationLoadingIndicatorPosition: string;
    scrollToTop: {
        button: null;
        offset: number;
        padding: number;
        position: string;
    };
    scrollToTopButton: null;
    scrollToTopOffset: number;
    scrollToTopPadding: number;
    scrollToTopPosition: string;
    search: {
        by: string;
        caseInsensitive: boolean;
        everyWord: boolean;
        onEveryWord: boolean;
        minCharactersCount: number;
        term: string;
    };
    searchBy: string;
    searchCaseInsensitive: boolean;
    searchOnEveryWord: boolean;
    searchTerm: string;
    searchMinCharactersCount: number;
    searchableMinCharactersCount: number;
    sort: {
        by: string;
        caseInsensitive: boolean;
        descending: boolean;
        groupBy: string;
        groupCaseInsensitive: boolean;
        groupDescending: boolean;
    };
    sortBy: string;
    sortCaseInsensitive: boolean;
    sortDesc: boolean;
    sortDescending: boolean;
    sortGroupBy: string;
    sortGroupDesc: boolean;
    sortGroupCaseInsensitive: boolean;
};
export declare const propTypes: {
    __forwarededRef: Requireable<object>;
    list: import("prop-types").Validator<object>;
    renderItem: import("prop-types").Validator<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
    limit: Requireable<string | number>;
    renderWhenEmpty: Requireable<(...args: any[]) => any>;
    reversed: Requireable<boolean>;
    renderOnScroll: Requireable<boolean>;
    wrapperHtmlTag: Requireable<string>;
    display: Requireable<import("prop-types").InferProps<{
        grid: Requireable<boolean>;
        gridColumnWidth: Requireable<string>;
        gridGap: Requireable<string>;
        row: Requireable<boolean>;
        rowGap: Requireable<string>;
    }>>;
    displayGrid: Requireable<boolean>;
    displayRow: Requireable<boolean>;
    gridGap: Requireable<string>;
    rowGap: Requireable<string>;
    minColumnWidth: Requireable<string>;
    filterBy: Requireable<string | ((...args: any[]) => any)>;
    group: Requireable<import("prop-types").InferProps<{
        by: Requireable<string | ((...args: any[]) => any)>;
        limit: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => any;
        of: Requireable<number>;
        reversed: Requireable<boolean>;
        separator: Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
        separatorAtTheBottom: Requireable<boolean>;
        sortedBy: Requireable<string | (string | import("prop-types").InferProps<{
            by: Requireable<string>;
            caseInsensitive: Requireable<boolean>;
            descending: Requireable<boolean>;
        }> | null | undefined)[]>;
        sortBy: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => any;
        sortedCaseInsensitive: Requireable<boolean>;
        sortCaseInsensitive: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => any;
        sortedDescending: Requireable<boolean>;
        sortDescending: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => any;
    }>>;
    groupBy: Requireable<string | ((...args: any[]) => any)>;
    groupOf: Requireable<number>;
    groupReversed: Requireable<boolean>;
    groupSeparator: Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
    groupSeparatorAtTheBottom: Requireable<boolean>;
    showGroupSeparatorAtTheBottom: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => any;
    groupSorted: Requireable<boolean>;
    groupSortedBy: Requireable<string | (string | import("prop-types").InferProps<{
        by: Requireable<string>;
        caseInsensitive: Requireable<boolean>;
        descending: Requireable<boolean>;
    }> | null | undefined)[]>;
    groupSortedDescending: Requireable<boolean>;
    groupSortedCaseInsensitive: Requireable<boolean>;
    pagination: Requireable<import("prop-types").InferProps<{
        hasMore: Requireable<boolean>;
        loadMore: Requireable<(...args: any[]) => any>;
        loadingIndicator: Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
        loadingIndicatorPosition: Requireable<string>;
    }>>;
    hasMoreItems: Requireable<boolean>;
    loadMoreItems: Requireable<(...args: any[]) => any>;
    paginationLoadingIndicator: Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
    paginationLoadingIndicatorPosition: Requireable<string>;
    scrollToTop: Requireable<boolean | import("prop-types").InferProps<{
        button: Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
        offset: Requireable<number>;
        padding: Requireable<number>;
        position: Requireable<string>;
    }>>;
    scrollToTopButton: Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
    scrollToTopOffset: Requireable<number>;
    scrollToTopPadding: Requireable<number>;
    scrollToTopPosition: Requireable<string>;
    search: Requireable<import("prop-types").InferProps<{
        by: Requireable<string | ((...args: any[]) => any) | (string | import("prop-types").InferProps<{
            by: Requireable<string>;
            caseInsensitive: Requireable<boolean>;
        }> | null | undefined)[]>;
        caseInsensitive: Requireable<boolean>;
        everyWord: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => any;
        onEveryWord: Requireable<boolean>;
        minCharactersCount: Requireable<number>;
        term: Requireable<string>;
    }>>;
    searchBy: Requireable<string | ((...args: any[]) => any) | (string | import("prop-types").InferProps<{
        by: Requireable<string>;
        caseInsensitive: Requireable<boolean>;
    }> | null | undefined)[]>;
    searchCaseInsensitive: Requireable<boolean>;
    searchOnEveryWord: Requireable<boolean>;
    searchableMinCharactersCount: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => any;
    searchMinCharactersCount: Requireable<number>;
    searchTerm: Requireable<string>;
    sort: Requireable<boolean | import("prop-types").InferProps<{
        by: Requireable<string | (string | import("prop-types").InferProps<{
            by: Requireable<string>;
            caseInsensitive: Requireable<boolean>;
            descending: Requireable<boolean>;
        }> | null | undefined)[]>;
        caseInsensitive: Requireable<boolean>;
        descending: Requireable<boolean>;
        groupBy: Requireable<string>;
        groupCaseInsensitive: Requireable<boolean>;
        groupDescending: Requireable<boolean>;
    }>>;
    sortBy: Requireable<string | (string | import("prop-types").InferProps<{
        by: Requireable<string>;
        caseInsensitive: Requireable<boolean>;
        descending: Requireable<boolean>;
    }> | null | undefined)[]>;
    sortCaseInsensitive: Requireable<boolean>;
    sortDesc: Requireable<boolean>;
    sortDescending: Requireable<boolean>;
    sortGroupBy: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => any;
    sortGroupDesc: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => any;
    sortGroupCaseInsensitive: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => any;
};
//# sourceMappingURL=props.d.ts.map