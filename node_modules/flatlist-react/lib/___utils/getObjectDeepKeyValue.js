"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var getType_1 = __importStar(require("./getType"));
var isType_1 = require("./isType");
var convertMapToObject_1 = __importDefault(require("./convertMapToObject"));
var convertAnythingToArrayOrObject = function (obj) { return (getType_1.default(obj) === getType_1.types.SET
    ? Array.from(obj) : getType_1.default(obj) === getType_1.types.MAP
    ? convertMapToObject_1.default(obj) : (isType_1.isObject(obj) || isType_1.isArray(obj))
    ? obj : {}); };
var getObjectDeepKeyValue = function (value, dotSeparatedKeys) {
    var convertedValue = convertAnythingToArrayOrObject(value);
    var convertedValueType = '';
    if (isType_1.isString(dotSeparatedKeys)) {
        var keys = dotSeparatedKeys.split('.');
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            if (convertedValue[key] === undefined) {
                console.error("Key \"" + key + "\" was not found in", value);
                convertedValue = null;
                break;
            }
            if (getType_1.default(convertedValue[key]) === getType_1.types.SET) {
                convertedValue = Array.from(convertedValue[key]);
                convertedValueType = getType_1.types.SET;
            }
            else if (getType_1.default(convertedValue[key]) === getType_1.types.MAP) {
                convertedValue = convertMapToObject_1.default(convertedValue[key]);
                convertedValueType = getType_1.types.MAP;
            }
            else {
                convertedValue = convertedValue[key];
                convertedValueType = '';
            }
        }
        // convert convertedValue to its original form
        return convertedValueType === getType_1.types.SET
            ? new Set(convertedValue) : convertedValueType === getType_1.types.MAP
            ? new Map(Object.entries(convertedValue)) : convertedValue;
    }
    throw new Error('getObjectDeepKeyValue: "dotSeparatedKeys" is not a dot separated values string');
};
exports.default = getObjectDeepKeyValue;
//# sourceMappingURL=getObjectDeepKeyValue.js.map