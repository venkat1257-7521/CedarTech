"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var isType_1 = require("../___utils/isType");
var DefaultBlank_1 = __importDefault(require("./DefaultBlank"));
exports.renderBlank = function (renderWhenEmpty) {
    if (renderWhenEmpty === void 0) { renderWhenEmpty = null; }
    return (renderWhenEmpty && isType_1.isFunction(renderWhenEmpty) ? renderWhenEmpty() : DefaultBlank_1.default());
};
exports.handleRenderGroupSeparator = function (CustomSeparator) { return function (sep, idx) {
    var cls = sep[0], groupLabel = sep[1], group = sep[2];
    var separatorKey = "separator-" + idx;
    if (CustomSeparator) {
        if (isType_1.isFunction(CustomSeparator)) {
            var Sep = CustomSeparator(group, idx, groupLabel);
            return (react_1.default.createElement("div", { key: separatorKey, className: cls },
                react_1.default.createElement(Sep.type, __assign({}, Sep.props))));
        }
        return (react_1.default.createElement("div", { key: separatorKey, className: cls }, react_1.cloneElement(CustomSeparator, { groupLabel: groupLabel, group: group })));
    }
    return (react_1.default.createElement("hr", { key: separatorKey, className: cls }));
}; };
exports.handleRenderItem = function (renderItem, renderSeparator) {
    if (renderSeparator === void 0) { renderSeparator = null; }
    return function (item, key) {
        if (!renderItem) {
            return null;
        }
        var itemId = item.id || key;
        if (isType_1.isArray(item) && item[0] === '___list-separator') {
            return renderSeparator
                ? renderSeparator(item, itemId)
                : null;
        }
        if (isType_1.isFunction(renderItem)) {
            return renderItem(item, itemId);
        }
        var comp = renderItem;
        return (react_1.default.createElement(comp.type, __assign({}, comp.props, { key: itemId, item: item })));
    };
};
exports.btnPosition = function (scrollContainer, btn) {
    var z = window.getComputedStyle(scrollContainer).zIndex;
    btn.style.position = 'absolute';
    btn.style.zIndex = "" + (z === 'auto' ? 1 : Number(z) + 1);
    btn.style.visibility = 'hidden';
    return function (vertical, horizontal, padding, offset) {
        if (padding === void 0) { padding = 20; }
        if (offset === void 0) { offset = 50; }
        var x = '0px';
        var y = '0px';
        if (vertical === 'top') {
            y = parseFloat("" + padding) + "px";
        }
        else if (vertical === 'bottom') {
            y = "calc(100% - " + (parseFloat("" + padding) + btn.offsetHeight) + "px)";
        }
        if (horizontal === 'left') {
            x = parseFloat("" + padding) + "px";
        }
        else if (horizontal === 'right') {
            x = "calc(100% - " + (parseFloat("" + padding) + btn.offsetWidth) + "px)";
        }
        window.requestAnimationFrame(function () {
            var dist = Number((scrollContainer.scrollHeight - scrollContainer.offsetHeight).toFixed(0));
            offset = Math.min(offset, dist);
            btn.style.top = y;
            btn.style.left = x;
            btn.style.visibility = dist !== 0 // got scrolled
                && (Number(scrollContainer.scrollTop.toFixed(0)) >= offset) // position meets the offset
                ? 'visible'
                : 'hidden';
        });
    };
};
//# sourceMappingURL=uiFunctions.js.map