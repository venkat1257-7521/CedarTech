"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var prop_types_1 = require("prop-types");
var isType_1 = require("../___utils/isType");
var DefaultLoadIndicator_1 = __importDefault(require("./DefaultLoadIndicator"));
var InfiniteLoader = /** @class */ (function (_super) {
    __extends(InfiniteLoader, _super);
    function InfiniteLoader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            loadIndicatorContainer: null,
            loading: false,
            scrollingContainer: null
        };
        _this.loaderContainerRef = react_1.createRef();
        // track the last scroll position so when new dom elements are inserted to avoid scroll jump
        _this.lastScrollTop = 0;
        _this.mounted = false;
        // keep track of the dom items in the list
        _this.currentItemsCount = 0;
        _this.getScrollingContainerChildrenCount = function () {
            var scrollingContainer = _this.state.scrollingContainer;
            if (scrollingContainer) {
                return Math.max(0, scrollingContainer.children.length);
            }
            return 0;
        };
        _this.setupScrollingContainerEventsListener = function (removeEvent) {
            if (removeEvent === void 0) { removeEvent = false; }
            var scrollingContainer = _this.state.scrollingContainer;
            if (scrollingContainer) {
                ['scroll', 'mousewheel', 'touchmove'].forEach(function (event) {
                    if (removeEvent) {
                        scrollingContainer.removeEventListener(event, _this.checkIfLoadingIsNeeded, true);
                    }
                    else {
                        scrollingContainer.addEventListener(event, _this.checkIfLoadingIsNeeded, true);
                    }
                });
            }
        };
        // show or hide loading indicators based on scroll position
        // calls the "loadMore" function when is needed
        _this.checkIfLoadingIsNeeded = function () {
            if (!_this.mounted || !_this.props.hasMore || _this.state.loading) {
                return;
            }
            var _a = _this.state, scrollingContainer = _a.scrollingContainer, loadIndicatorContainer = _a.loadIndicatorContainer;
            if (scrollingContainer && loadIndicatorContainer) {
                var scrollTop = scrollingContainer.scrollTop, offsetTop = scrollingContainer.offsetTop, offsetHeight = scrollingContainer.offsetHeight;
                _this.lastScrollTop = scrollTop;
                var loaderPosition = (loadIndicatorContainer.offsetTop - scrollTop);
                var startingPoint = offsetTop + offsetHeight;
                if (loaderPosition <= startingPoint) {
                    _this.setState({ loading: true }, _this.props.loadMore);
                }
            }
        };
        return _this;
    }
    InfiniteLoader.prototype.componentDidMount = function () {
        var _this = this;
        this.mounted = true;
        var loadIndicatorContainer = this.loaderContainerRef.current;
        if (loadIndicatorContainer) {
            this.setState({
                loadIndicatorContainer: loadIndicatorContainer,
                scrollingContainer: loadIndicatorContainer.parentNode
            }, function () {
                _this.currentItemsCount = _this.getScrollingContainerChildrenCount();
                _this.setupScrollingContainerEventsListener();
            });
        }
        else {
            console.warn('FlatList: it was not possible to get container\'s ref. '
                + 'Infinite scrolling pagination will not be possible');
        }
    };
    InfiniteLoader.prototype.componentDidUpdate = function (prevProps, prevState) {
        // reset scroll position to where last was
        if (this.state.scrollingContainer) {
            this.state.scrollingContainer.scrollTop = this.lastScrollTop;
        }
        // if prev and current loading are the same is because the component updated from props change
        // otherwise is because the component updated itself
        if (prevState.loading === this.state.loading) {
            this.reset();
        }
    };
    InfiniteLoader.prototype.componentWillUnmount = function () {
        this.setupScrollingContainerEventsListener(true);
        this.mounted = false;
    };
    // update the loading flags and items count whether "hasMore" is false or list changed
    InfiniteLoader.prototype.reset = function () {
        if (this.state.loading) {
            this.setState({ loading: false });
        }
        this.checkIfLoadingIsNeeded();
    };
    InfiniteLoader.prototype.render = function () {
        var loading = this.state.loading;
        var _a = this.props, hasMore = _a.hasMore, loadingIndicator = _a.loadingIndicator, loadingIndicatorPosition = _a.loadingIndicatorPosition;
        // do not remove the element from the dom so the ref is not broken but set it invisible enough
        var styles = {
            display: 'flex',
            height: hasMore ? 'auto' : 0,
            justifyContent: loadingIndicatorPosition === 'center' ? loadingIndicatorPosition
                : loadingIndicatorPosition === 'right' ? 'flex-end' : 'flex-start',
            padding: hasMore ? '5px 0' : 0,
            visibility: (loading && hasMore) ? 'visible' : 'hidden'
        };
        return (react_1.default.createElement("div", { ref: this.loaderContainerRef, className: "__infinite-loader", style: styles }, hasMore
            && (loadingIndicator
                ? (isType_1.isFunction(loadingIndicator) ? loadingIndicator() : loadingIndicator)
                : react_1.default.createElement(DefaultLoadIndicator_1.default, null))));
    };
    InfiniteLoader.propTypes = {
        hasMore: prop_types_1.bool.isRequired,
        loadMore: prop_types_1.func.isRequired,
        loadingIndicator: prop_types_1.oneOfType([prop_types_1.func, prop_types_1.node, prop_types_1.element]),
        loadingIndicatorPosition: prop_types_1.oneOf(['left', 'center', 'right', ''])
    };
    InfiniteLoader.defaultProps = {
        loadingIndicatorPosition: 'left',
        loadingIndicator: DefaultLoadIndicator_1.default
    };
    return InfiniteLoader;
}(react_1.Component));
exports.default = InfiniteLoader;
//# sourceMappingURL=InfiniteLoader.js.map