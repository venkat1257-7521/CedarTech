{"ast":null,"code":"var _jsxFileName = \"/Users/venkat/Desktop/black-dashboard-react/src/components/Sidebar/Sidebar.js\",\n    _s = $RefreshSig$();\n\n/*!\n\n=========================================================\n* Black Dashboard React v1.2.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/black-dashboard-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/black-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n\n/*eslint-disable*/\nimport React from \"react\";\nimport { NavLink, Link, useLocation } from \"react-router-dom\"; // nodejs library to set properties for components\n\nimport { PropTypes } from \"prop-types\"; // javascript plugin used to create scrollbars on windows\n\nimport PerfectScrollbar from \"perfect-scrollbar\"; // reactstrap components\n\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ps;\n\nfunction Sidebar(props) {\n  _s();\n\n  var _this = this;\n\n  var location = useLocation();\n  var sidebarRef = React.useRef(null); // verifies if routeName is the one active (in browser input)\n\n  var activeRoute = function activeRoute(routeName) {\n    return location.pathname === routeName ? \"active\" : \"\";\n  };\n\n  React.useEffect(function () {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(sidebarRef.current, {\n        suppressScrollX: true,\n        suppressScrollY: false\n      });\n    } // Specify how to clean up after this effect:\n\n\n    return function cleanup() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n    };\n  });\n\n  var linkOnClick = function linkOnClick() {\n    document.documentElement.classList.remove(\"nav-open\");\n  };\n\n  var routes = props.routes,\n      rtlActive = props.rtlActive,\n      logo = props.logo;\n  var logoImg = null;\n  var logoText = null;\n\n  if (logo !== undefined) {\n    if (logo.outterLink !== undefined) {\n      logoImg = /*#__PURE__*/_jsxDEV(\"a\", {\n        href: logo.outterLink,\n        className: \"simple-text logo-mini\",\n        target: \"_blank\",\n        onClick: props.toggleSidebar,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo.imgSrc,\n            alt: \"react-logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this);\n      logoText = /*#__PURE__*/_jsxDEV(\"a\", {\n        href: logo.outterLink,\n        className: \"simple-text logo-normal\",\n        target: \"_blank\",\n        onClick: props.toggleSidebar,\n        children: [logo.text, /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: logo.text2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n    } else {\n      logoImg = /*#__PURE__*/_jsxDEV(Link, {\n        to: logo.innerLink,\n        className: \"simple-text logo-mini\",\n        onClick: props.toggleSidebar,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo.imgSrc,\n            alt: \"react-logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this);\n      logoText = /*#__PURE__*/_jsxDEV(Link, {\n        to: logo.innerLink,\n        className: \"simple-text logo-normal\",\n        onClick: props.toggleSidebar,\n        children: logo.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this);\n      logoText = /*#__PURE__*/_jsxDEV(Link, {\n        to: logo.innerLink,\n        className: \"simple-text logo-normal\",\n        onClick: props.toggleSidebar,\n        children: logo.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-wrapper\",\n      children: [logoImg !== null || logoText !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: [logoImg, logoText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }, this) : null, /*#__PURE__*/_jsxDEV(Nav, {\n        children: routes.map(function (prop, key) {\n          if (prop.redirect) return null;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: activeRoute(prop.path) + (prop.pro ? \" active-pro\" : \"\"),\n            children: /*#__PURE__*/_jsxDEV(NavLink, {\n              to: prop.layout + prop.path,\n              className: \"nav-link\",\n              activeClassName: \"active\",\n              onClick: props.toggleSidebar,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: prop.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 23\n              }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: rtlActive ? \"\" : prop.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 23\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 21\n            }, _this)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 19\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Sidebar, \"D7Jqss+EaZ4C9XG5NUxwx/SUfWU=\", false, function () {\n  return [useLocation];\n});\n\n_c = Sidebar;\nSidebar.defaultProps = {\n  routes: [{}]\n};\nSidebar.propTypes = {\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\n  // insde the links of this component\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the text of the logo\n    text: PropTypes.node,\n    // the image src of the logo\n    imgSrc: PropTypes.string\n  })\n};\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["/Users/venkat/Desktop/black-dashboard-react/src/components/Sidebar/Sidebar.js"],"names":["React","NavLink","Link","useLocation","PropTypes","PerfectScrollbar","Nav","ReactstrapNavLink","ps","Sidebar","props","location","sidebarRef","useRef","activeRoute","routeName","pathname","useEffect","navigator","platform","indexOf","current","suppressScrollX","suppressScrollY","cleanup","destroy","linkOnClick","document","documentElement","classList","remove","routes","rtlActive","logo","logoImg","logoText","undefined","outterLink","toggleSidebar","imgSrc","text","text2","innerLink","map","prop","key","redirect","path","pro","layout","icon","name","defaultProps","propTypes","arrayOf","object","shape","string","node"],"mappings":"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","sourcesContent":["/*!\n\n=========================================================\n* Black Dashboard React v1.2.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/black-dashboard-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/black-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n/*eslint-disable*/\nimport React from \"react\";\nimport { NavLink, Link, useLocation } from \"react-router-dom\";\n// nodejs library to set properties for components\nimport { PropTypes } from \"prop-types\";\n\n// javascript plugin used to create scrollbars on windows\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\n// reactstrap components\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\n\n\nvar ps;\n\nfunction Sidebar(props) {\n  const location = useLocation();\n  const sidebarRef = React.useRef(null);\n  // verifies if routeName is the one active (in browser input)\n  const activeRoute = (routeName) => {\n    return location.pathname === routeName ? \"active\" : \"\";\n  };\n  React.useEffect(() => {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(sidebarRef.current, {\n        suppressScrollX: true,\n        suppressScrollY: false,\n      });\n    }\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n    };\n  });\n  const linkOnClick = () => {\n    document.documentElement.classList.remove(\"nav-open\");\n  };\n  const { routes, rtlActive, logo } = props;\n  let logoImg = null;\n  let logoText = null;\n  \n  if (logo !== undefined) {\n    if (logo.outterLink !== undefined) {\n      logoImg = (\n        <a\n          href={logo.outterLink}\n          className=\"simple-text logo-mini\"\n          target=\"_blank\"\n          onClick={props.toggleSidebar}\n        >\n          <div className=\"logo-img\">\n            <img src={logo.imgSrc} alt=\"react-logo\" />\n          </div>\n        </a>\n      );\n      logoText = (\n        <a\n          href={logo.outterLink}\n          className=\"simple-text logo-normal\"\n          target=\"_blank\"\n          onClick={props.toggleSidebar}\n        >\n          {logo.text}\n          <h6>{logo.text2}</h6>\n        </a>\n      );\n\n\n    } else {\n      logoImg = (\n        <Link\n          to={logo.innerLink}\n          className=\"simple-text logo-mini\"\n          onClick={props.toggleSidebar}\n        >\n          <div className=\"logo-img\">\n            <img src={logo.imgSrc} alt=\"react-logo\" />\n          </div>\n        </Link>\n      );\n      logoText = (\n        <Link\n          to={logo.innerLink}\n          className=\"simple-text logo-normal\"\n          onClick={props.toggleSidebar}\n        >\n          {logo.text}\n        </Link>\n      );\n      logoText = (\n        <Link\n          to={logo.innerLink}\n          className=\"simple-text logo-normal\"\n          onClick={props.toggleSidebar}\n        >\n          {logo.text}\n        </Link>\n      );\n    }\n  }\n  return (\n\n        <div className=\"sidebar\">\n          <div className=\"sidebar-wrapper\" >\n            {logoImg !== null || logoText !== null ? (\n              <div className=\"logo\">\n                {logoImg}\n                {logoText}\n              </div>\n            ) : null}\n            <Nav>\n              {routes.map((prop, key) => {\n                if (prop.redirect) return null;\n                return (\n                  <li\n                    className={\n                      activeRoute(prop.path) + (prop.pro ? \" active-pro\" : \"\")\n                    }\n                    key={key}\n                  >\n                    <NavLink\n                      to={prop.layout + prop.path}\n                      className=\"nav-link\"\n                      activeClassName=\"active\"\n                      onClick={props.toggleSidebar}\n                    >\n                      <i className={prop.icon} />\n                      <p>{rtlActive ? \"\" : prop.name}</p>\n                    </NavLink>\n                  </li>\n                );\n              })}\n\n            </Nav>\n          </div>\n        </div>\n\n  );\n}\n\nSidebar.defaultProps = {\n  routes: [{}],\n};\n\nSidebar.propTypes = {\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\n  // insde the links of this component\n  \n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the text of the logo\n    text: PropTypes.node,\n    // the image src of the logo\n    imgSrc: PropTypes.string,\n  }),\n};\n\nexport default Sidebar;\n"]},"metadata":{},"sourceType":"module"}