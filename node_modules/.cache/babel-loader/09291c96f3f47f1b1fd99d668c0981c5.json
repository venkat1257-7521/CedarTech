{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar getType_1 = __importStar(require(\"./getType\"));\n\nvar isType_1 = require(\"./isType\");\n\nvar convertMapToObject_1 = __importDefault(require(\"./convertMapToObject\"));\n\nvar convertAnythingToArrayOrObject = function convertAnythingToArrayOrObject(obj) {\n  return getType_1.default(obj) === getType_1.types.SET ? Array.from(obj) : getType_1.default(obj) === getType_1.types.MAP ? convertMapToObject_1.default(obj) : isType_1.isObject(obj) || isType_1.isArray(obj) ? obj : {};\n};\n\nvar getObjectDeepKeyValue = function getObjectDeepKeyValue(value, dotSeparatedKeys) {\n  var convertedValue = convertAnythingToArrayOrObject(value);\n  var convertedValueType = '';\n\n  if (isType_1.isString(dotSeparatedKeys)) {\n    var keys = dotSeparatedKeys.split('.');\n\n    for (var i = 0; i < keys.length; i += 1) {\n      var key = keys[i];\n\n      if (convertedValue[key] === undefined) {\n        console.error(\"Key \\\"\" + key + \"\\\" was not found in\", value);\n        convertedValue = null;\n        break;\n      }\n\n      if (getType_1.default(convertedValue[key]) === getType_1.types.SET) {\n        convertedValue = Array.from(convertedValue[key]);\n        convertedValueType = getType_1.types.SET;\n      } else if (getType_1.default(convertedValue[key]) === getType_1.types.MAP) {\n        convertedValue = convertMapToObject_1.default(convertedValue[key]);\n        convertedValueType = getType_1.types.MAP;\n      } else {\n        convertedValue = convertedValue[key];\n        convertedValueType = '';\n      }\n    } // convert convertedValue to its original form\n\n\n    return convertedValueType === getType_1.types.SET ? new Set(convertedValue) : convertedValueType === getType_1.types.MAP ? new Map(Object.entries(convertedValue)) : convertedValue;\n  }\n\n  throw new Error('getObjectDeepKeyValue: \"dotSeparatedKeys\" is not a dot separated values string');\n};\n\nexports.default = getObjectDeepKeyValue;","map":{"version":3,"sources":["../../src/___utils/getObjectDeepKeyValue.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;AAEA,IAAM,8BAA8B,GAAG,SAAjC,8BAAiC,CAAC,GAAD,EAAS;AAAK,SAAC,SAAA,CAAA,OAAA,CAAQ,GAAR,MAAiB,SAAA,CAAA,KAAA,CAAM,GAAvB,GAChD,KAAK,CAAC,IAAN,CAAW,GAAX,CADgD,GAC9B,SAAA,CAAA,OAAA,CAAQ,GAAR,MAAiB,SAAA,CAAA,KAAA,CAAM,GAAvB,GACd,oBAAA,CAAA,OAAA,CAAmB,GAAnB,CADc,GACa,QAAA,CAAA,QAAA,CAAS,GAAT,KAAiB,QAAA,CAAA,OAAA,CAAQ,GAAR,CAAlB,GACtB,GADsB,GAFiB,EAAA;AAG9B,CAHvB;;AAKA,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,KAAD,EAAa,gBAAb,EAAqC;AAC/D,MAAI,cAAc,GAAG,8BAA8B,CAAC,KAAD,CAAnD;AACA,MAAI,kBAAkB,GAAG,EAAzB;;AAEA,MAAI,QAAA,CAAA,QAAA,CAAS,gBAAT,CAAJ,EAAgC;AAC5B,QAAM,IAAI,GAAU,gBAAgB,CAAC,KAAjB,CAAuB,GAAvB,CAApB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,IAAI,CAAtC,EAAyC;AACrC,UAAM,GAAG,GAAG,IAAI,CAAC,CAAD,CAAhB;;AACA,UAAI,cAAc,CAAC,GAAD,CAAd,KAAwB,SAA5B,EAAuC;AACnC,QAAA,OAAO,CAAC,KAAR,CAAc,WAAQ,GAAR,GAAW,qBAAzB,EAA+C,KAA/C;AACA,QAAA,cAAc,GAAG,IAAjB;AACA;AACH;;AAED,UAAI,SAAA,CAAA,OAAA,CAAQ,cAAc,CAAC,GAAD,CAAtB,MAAiC,SAAA,CAAA,KAAA,CAAM,GAA3C,EAAgD;AAC5C,QAAA,cAAc,GAAG,KAAK,CAAC,IAAN,CAAW,cAAc,CAAC,GAAD,CAAzB,CAAjB;AACA,QAAA,kBAAkB,GAAG,SAAA,CAAA,KAAA,CAAM,GAA3B;AACH,OAHD,MAGO,IAAI,SAAA,CAAA,OAAA,CAAQ,cAAc,CAAC,GAAD,CAAtB,MAAiC,SAAA,CAAA,KAAA,CAAM,GAA3C,EAAgD;AACnD,QAAA,cAAc,GAAG,oBAAA,CAAA,OAAA,CAAmB,cAAc,CAAC,GAAD,CAAjC,CAAjB;AACA,QAAA,kBAAkB,GAAG,SAAA,CAAA,KAAA,CAAM,GAA3B;AACH,OAHM,MAGA;AACH,QAAA,cAAc,GAAG,cAAc,CAAC,GAAD,CAA/B;AACA,QAAA,kBAAkB,GAAG,EAArB;AACH;AACJ,KArB2B,CAuB5B;;;AACA,WAAO,kBAAkB,KAAK,SAAA,CAAA,KAAA,CAAM,GAA7B,GACD,IAAI,GAAJ,CAAQ,cAAR,CADC,GACyB,kBAAkB,KAAK,SAAA,CAAA,KAAA,CAAM,GAA7B,GACtB,IAAI,GAAJ,CAAQ,MAAM,CAAC,OAAP,CAAe,cAAf,CAAR,CADsB,GACoB,cAFpD;AAGH;;AAED,QAAM,IAAI,KAAJ,CAAU,gFAAV,CAAN;AACH,CAlCD;;AAoCA,OAAA,CAAA,OAAA,GAAe,qBAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar getType_1 = __importStar(require(\"./getType\"));\nvar isType_1 = require(\"./isType\");\nvar convertMapToObject_1 = __importDefault(require(\"./convertMapToObject\"));\nvar convertAnythingToArrayOrObject = function (obj) { return (getType_1.default(obj) === getType_1.types.SET\n    ? Array.from(obj) : getType_1.default(obj) === getType_1.types.MAP\n    ? convertMapToObject_1.default(obj) : (isType_1.isObject(obj) || isType_1.isArray(obj))\n    ? obj : {}); };\nvar getObjectDeepKeyValue = function (value, dotSeparatedKeys) {\n    var convertedValue = convertAnythingToArrayOrObject(value);\n    var convertedValueType = '';\n    if (isType_1.isString(dotSeparatedKeys)) {\n        var keys = dotSeparatedKeys.split('.');\n        for (var i = 0; i < keys.length; i += 1) {\n            var key = keys[i];\n            if (convertedValue[key] === undefined) {\n                console.error(\"Key \\\"\" + key + \"\\\" was not found in\", value);\n                convertedValue = null;\n                break;\n            }\n            if (getType_1.default(convertedValue[key]) === getType_1.types.SET) {\n                convertedValue = Array.from(convertedValue[key]);\n                convertedValueType = getType_1.types.SET;\n            }\n            else if (getType_1.default(convertedValue[key]) === getType_1.types.MAP) {\n                convertedValue = convertMapToObject_1.default(convertedValue[key]);\n                convertedValueType = getType_1.types.MAP;\n            }\n            else {\n                convertedValue = convertedValue[key];\n                convertedValueType = '';\n            }\n        }\n        // convert convertedValue to its original form\n        return convertedValueType === getType_1.types.SET\n            ? new Set(convertedValue) : convertedValueType === getType_1.types.MAP\n            ? new Map(Object.entries(convertedValue)) : convertedValue;\n    }\n    throw new Error('getObjectDeepKeyValue: \"dotSeparatedKeys\" is not a dot separated values string');\n};\nexports.default = getObjectDeepKeyValue;\n//# sourceMappingURL=getObjectDeepKeyValue.js.map"]},"metadata":{},"sourceType":"script"}